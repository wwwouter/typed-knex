"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrimaryKeyColumn = exports.getColumnProperties = exports.getColumnInformation = exports.Column = exports.getColumnName = exports.getTableName = exports.getTableMetadata = exports.Table = exports.Entity = exports.getEntities = void 0;
require("reflect-metadata");
const tableyMetadataKey = Symbol('table');
const tableColumns = new Map();
const entities = [];
// export function Entity2(tableName: string) {
//     return ((target: Function) => {
//         console.log('target: ', target);
//         return Reflect.metadata(tableyMetadataKey, { tableName: tableName });
//     })(arguments);
// }
function getEntities() {
    return entities;
}
exports.getEntities = getEntities;
function Entity(tableName) {
    return (target) => {
        Reflect.metadata(tableyMetadataKey, { tableName: tableName !== null && tableName !== void 0 ? tableName : target.name })(target);
        entities.push({ tableName: tableName !== null && tableName !== void 0 ? tableName : target.name, entityClass: target });
    };
}
exports.Entity = Entity;
// tslint:disable-next-line: variable-name
exports.Table = Entity;
function getTableMetadata(tableClass) {
    return Reflect.getMetadata(tableyMetadataKey, tableClass);
}
exports.getTableMetadata = getTableMetadata;
function getTableName(tableClass) {
    return Reflect.getMetadata(tableyMetadataKey, tableClass).tableName;
}
exports.getTableName = getTableName;
function getColumnName(tableClass, propertyName) {
    return getColumnInformation(tableClass, propertyName).name;
}
exports.getColumnName = getColumnName;
// function registerEntity(target: any, propertyKey: string): void {
//     Reflect.metadata(columnMetadataKey, { isColumn: true })(target);
//     const columns = tableColumns.get(target.constructor) || [];
//     let name = propertyKey;
//     // console.log('name: ', name);
//     let primary = false;
//     // console.log('options: ', options);
//     if (options) {
//         if (options.name !== undefined) {
//             name = options.name;
//         }
//         primary = options.primary === true;
//     }
//     columns.push({ name, primary, propertyKey });
//     tableColumns.set(target.constructor, columns);
// }
const columnMetadataKey = Symbol('column');
function Column(options) {
    return getRegisterColumn(options);
}
exports.Column = Column;
function getRegisterColumn(options) {
    function registerColumn(target, propertyKey) {
        Reflect.metadata(columnMetadataKey, { isColumn: true })(target);
        const designType = Reflect.getMetadata('design:type', target, propertyKey);
        const isForeignKey = designType
            ? ['String', 'Number', 'Boolean'].includes(designType.name) ===
                false
            : false;
        const columns = tableColumns.get(target.constructor) || [];
        let name = propertyKey;
        // console.log('name: ', name);
        let primary = false;
        // console.log('options: ', options);
        if (options) {
            if (options.name !== undefined) {
                name = options.name;
            }
            primary = options.primary === true;
        }
        columns.push({ name, primary, propertyKey, isForeignKey, designType });
        tableColumns.set(target.constructor, columns);
    }
    return registerColumn;
}
function getColumnInformation(target, propertyKey) {
    const properties = getColumnProperties(target);
    const property = properties.find(i => i.propertyKey === propertyKey);
    if (!property) {
        const fkObject = properties.find(p => p.name === propertyKey);
        if (typeof (fkObject === null || fkObject === void 0 ? void 0 : fkObject.designType) === 'function') {
            throw new Error(`It seems that class "${target.name}" only has a foreign key object "${fkObject.propertyKey}", but is missing the foreign key property "${propertyKey}". Try adding "@column() ${propertyKey} : [correct type]" to class "${target.name}"`);
        }
        throw new Error(`Cannot get column data. Did you set @Column() attribute on ${target.name}.${propertyKey}?`);
    }
    return {
        columnClass: Reflect.getMetadata('design:type', target.prototype, propertyKey),
        name: property.name,
        primary: property.primary,
        propertyKey: property.propertyKey,
        designType: property.designType,
        isForeignKey: property.isForeignKey
    };
}
exports.getColumnInformation = getColumnInformation;
function getColumnProperties(tableClass) {
    const columns = tableColumns.get(tableClass);
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    return columns;
}
exports.getColumnProperties = getColumnProperties;
function getPrimaryKeyColumn(tableClass) {
    // console.log('tableClass: ', tableClass);
    const columns = tableColumns.get(tableClass);
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    const primaryKeyColumn = columns.find(i => i.primary);
    if (primaryKeyColumn === undefined) {
        throw new Error(`Cannot get primary key column ${tableClass.constructor.name}, did you set @Column({primary:true}) attribute?`);
    }
    return primaryKeyColumn;
}
exports.getPrimaryKeyColumn = getPrimaryKeyColumn;
//# sourceMappingURL=data:application/json;base64,