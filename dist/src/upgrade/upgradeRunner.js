"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runUpgrade = exports.upgradeProjectJoinOnColumnsToOn = exports.upgradeProjectStringParameters = void 0;
const path = require("path");
const ts_morph_1 = require("ts-morph");
function changeArgumentsFromFunctionToString(callExpression) {
    var _a, _b, _c;
    const args = callExpression.getArguments();
    if (((_a = args[0]) === null || _a === void 0 ? void 0 : _a.getKind()) === ts_morph_1.SyntaxKind.ArrowFunction) {
        changeArgumentFromFunctionToString(args[0], callExpression, 0);
    }
    if (((_b = args[1]) === null || _b === void 0 ? void 0 : _b.getKind()) === ts_morph_1.SyntaxKind.ArrowFunction) {
        changeArgumentFromFunctionToString(args[1], callExpression, 1);
    }
    if (((_c = args[2]) === null || _c === void 0 ? void 0 : _c.getKind()) === ts_morph_1.SyntaxKind.ArrowFunction) {
        changeArgumentFromFunctionToString(args[2], callExpression, 2);
    }
}
function changeArgumentFromFunctionToString(argumentToReplace, callExpression, argumentIndex) {
    if (argumentToReplace.getBody().getKind() === ts_morph_1.SyntaxKind.PropertyAccessExpression) {
        const body = argumentToReplace.getBody();
        const indexOfFirstPeriod = body.getText().indexOf('.');
        const name = body.getText().substring(indexOfFirstPeriod + 1);
        callExpression.removeArgument(argumentIndex);
        callExpression.insertArgument(argumentIndex, `'${name}'`);
    }
    else if (argumentToReplace.getBody().getKind() === ts_morph_1.SyntaxKind.ArrayLiteralExpression) {
        const body = argumentToReplace.getBody();
        const parameters = [];
        const propertyAccessExpressions = body.getChildren()[1].getChildrenOfKind(ts_morph_1.SyntaxKind.PropertyAccessExpression);
        for (const propertyAccessExpression of propertyAccessExpressions) {
            const indexOfFirstPeriod = propertyAccessExpression.getText().indexOf('.');
            const name = propertyAccessExpression.getText().substring(indexOfFirstPeriod + 1);
            parameters.push(`'${name}'`);
        }
        callExpression.removeArgument(argumentIndex);
        callExpression.insertArgument(argumentIndex, parameters.join());
    }
}
function changeArgumentFromObjectToString(argumentToReplace, callExpression, argumentIndex) {
    const indexOfFirstPeriod = argumentToReplace.getText().indexOf('.');
    const name = argumentToReplace.getText().substring(indexOfFirstPeriod + 1);
    callExpression.removeArgument(argumentIndex);
    callExpression.insertArgument(argumentIndex, `'${name}'`);
}
function changeIWhereCompareTwoColumns(callExpression) {
    const args = callExpression.getArguments();
    if (args[0].getKind() === ts_morph_1.SyntaxKind.ArrowFunction && args[2].getKind() === ts_morph_1.SyntaxKind.PropertyAccessExpression) {
        changeArgumentFromFunctionToString(args[0], callExpression, 0);
        changeArgumentFromObjectToString(args[2], callExpression, 2);
    }
}
function changeIWhereExists(callExpression) {
    const args = callExpression.getArguments();
    const subqueryFunction = args[1];
    const parameters = subqueryFunction.getParameters();
    if (parameters.length === 2) {
        parameters[1].remove();
    }
}
function printProgress(progress) {
    const percentage = (progress * 100).toFixed(0) + '%';
    if (process.stdout && process.stdout.cursorTo) {
        process.stdout.cursorTo(0);
        process.stdout.write(percentage);
    }
    else {
        console.log(percentage);
    }
}
function upgradeProjectStringParameters(project) {
    const sourceFiles = project.getSourceFiles();
    let fileCounter = 0;
    for (const sourceFile of sourceFiles) {
        printProgress(fileCounter / sourceFiles.length);
        sourceFile.forEachDescendant(node => {
            if (node.getKind() === ts_morph_1.SyntaxKind.PropertyAccessExpression) {
                const typeString = node.getType().getText();
                if (typeString.includes('IJoinOn<') ||
                    typeString.includes('IFindByPrimaryKey') ||
                    typeString.includes('IInsertSelect') ||
                    typeString.includes('IColumnParameterNoRowTransformation') ||
                    typeString.includes('IJoinOnVal<') ||
                    typeString.includes('IJoinOnNull<') ||
                    typeString.includes('IOrderBy<') ||
                    typeString.includes('IDbFunctionWithAlias<') ||
                    typeString.includes('IKeyFunctionAsParametersReturnQueryBuider<') ||
                    typeString.includes('ISelectableColumnKeyFunctionAsParametersReturnQueryBuider<') ||
                    typeString.includes('IWhere<') ||
                    typeString.includes('IWhereIn<') ||
                    typeString.includes('IWhereBetween<') ||
                    typeString.includes('IHaving<') ||
                    typeString.includes('ISelectWithFunctionColumns3<') ||
                    typeString.includes('IWhereWithOperator<')) {
                    const callExpression = node.getParentIfKind(ts_morph_1.SyntaxKind.CallExpression);
                    if (callExpression) {
                        changeArgumentsFromFunctionToString(callExpression);
                    }
                }
                else if (typeString.startsWith('IWhereCompareTwoColumns<')) {
                    const callExpression = node.getParentIfKind(ts_morph_1.SyntaxKind.CallExpression);
                    if (callExpression) {
                        changeIWhereCompareTwoColumns(callExpression);
                    }
                }
                else if (typeString.startsWith('IWhereExists<')) {
                    const callExpression = node.getParentIfKind(ts_morph_1.SyntaxKind.CallExpression);
                    if (callExpression) {
                        changeIWhereExists(callExpression);
                    }
                }
            }
        });
        fileCounter++;
    }
    printProgress(1);
}
exports.upgradeProjectStringParameters = upgradeProjectStringParameters;
function upgradeProjectJoinOnColumnsToOn(project) {
    const sourceFiles = project.getSourceFiles();
    let fileCounter = 0;
    for (const sourceFile of sourceFiles) {
        printProgress(fileCounter / sourceFiles.length);
        sourceFile.forEachDescendant(node => {
            if (node.getKind() === ts_morph_1.SyntaxKind.PropertyAccessExpression) {
                const typeString = node.getType().getText();
                if (typeString.includes('IJoinOnColumns<')) {
                    const callExpression = node.getParentIfKind(ts_morph_1.SyntaxKind.CallExpression);
                    if (callExpression) {
                        callExpression.getFirstChild().getChildren()[2].replaceWithText('on');
                        const args = callExpression.getArguments();
                        if (args.length === 3) {
                            const arg0Text = args[0].getText();
                            const arg2Text = args[2].getText();
                            callExpression.removeArgument(0);
                            callExpression.insertArgument(0, arg2Text);
                            callExpression.removeArgument(2);
                            callExpression.insertArgument(2, arg0Text);
                        }
                    }
                }
            }
        });
        fileCounter++;
    }
}
exports.upgradeProjectJoinOnColumnsToOn = upgradeProjectJoinOnColumnsToOn;
async function runUpgrade(actions, configFilename) {
    let tsConfigFilePath;
    if (!configFilename) {
        tsConfigFilePath = 'tsconfig.json';
    }
    else {
        tsConfigFilePath = configFilename;
    }
    const tsConfigFileFullPath = path.resolve(tsConfigFilePath);
    console.log(`Loading "${tsConfigFileFullPath}"`);
    const project = new ts_morph_1.Project({
        tsConfigFilePath: tsConfigFileFullPath,
    });
    let remainingActions = [...actions];
    if (actions.includes('string-parameters')) {
        console.log('Running "string-parameters"');
        upgradeProjectStringParameters(project);
        remainingActions = remainingActions.filter(action => action !== 'string-parameters');
    }
    if (actions.includes('join-on-columns-to-on')) {
        console.log('Running "join-on-columns-to-on"');
        upgradeProjectJoinOnColumnsToOn(project);
        remainingActions = remainingActions.filter(action => action !== 'join-on-columns-to-on');
    }
    if (remainingActions.length > 0) {
        console.log(`Unknown actions: ${remainingActions.join()}`);
    }
    await project.save();
}
exports.runUpgrade = runUpgrade;
//# sourceMappingURL=data:application/json;base64,